{"version":3,"file":"ui_scratchpad.min.js","sources":["../src/ui_scratchpad.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more util.details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Implementation of the scratchpad_ui user interface plugin. For overall details\n * of the UI plugin architecture, see userinterfacewrapper.js.\n *\n * This plugin replaces the usual textarea answer element with a UI is designed to\n * allow the execution of code in the CodeRunner question in a manner similar to an IDE.\n * It contains two editor boxes, one on top of another, allowing users to enter and\n * edit code in both. It contains two embedded Ace UIs.\n *  By default, only the top editor is visible and the bottom editor (Scratchpad Area) is hidden,\n * clicking the Scratchpad button shows it. The Scratchpad area contains a second editor,\n * a Run button and a Prefix with Answer checkbox. Additionally, there is a help button that\n * provides information about how to use the Scratchpad.\n *  It's possible to run code 'in-browser' by clicking the Run Button,\n * without making a submission via the Check Button:\n *          If Prefix with Answer is not checked, only the code in the Scratchpad is run --\n *      allowing for a rough working spot to quickly check the result of code.\n *          Otherwise, when Prefix with Answer is checked, the code in the Scratchpad is\n *      appended to the code in the first editor before being run.\n *  The Run Button has some limitations when using its default configuration:\n *     Does not support programs that use STDIN (by default);\n *     Only supports textual STDOUT (by default).\n * Note: These features can be supported, see the README section on wrappers...\n *  The serialisation of this UI is a JSON object with the fields\n * with fields:\n *      answer_code: [\"\"] A list containing a string with answer code from the first editor;\n *      test_code: [\"\"] A list containing a string with containing answer code from the second editor;\n *      show_hide: [\"1\"] when scratchpad is visible, otherwise [\"\"];\n *      prefix_ans: [\"1\"] when Prefix with Answer is checked, otherwise [\"\"].\n *\n * UI Parameters:\n *    - scratchpad_name: display name of the scratchpad, used to hide/un-hide the scratchpad.\n *    - button_name: run button text.\n *    - prefix_name: prefix with answer check-box label text.\n *    - help_text: help text to show.\n *    - run_lang: language used to run code when the run button is clicked,\n *      this should be the language your wrapper is written in (if applicable).\n *    - wrapper_src: location of wrapper code to be used by the run button, if applicable:\n *      setting to globalextra will use text in global extra field,\n *    - prototypeextra will use the prototype extra field.\n *    - output_display_mode: control how program output is displayed on runs, there are three modes:\n *          - text: display program output as text, html escaped;\n *          - json: display program output, when it is json,\n *          - html: display program output as raw html.\n *      NOTE: see qtype_coderunner/outputdisplayarea.js for more info...\n *    - disable_scratchpad: disable the scratchpad, effectively reverting to the Ace UI\n *      from student perspective.\n *    - invert_prefix: inverts meaning of prefix_ans serialisation -- '1' means un-ticked, vice versa.\n *      This can be used to swap the default state.\n *\n * @module qtype_coderunner/ui_scratchpad\n * @copyright  Richard Lobb, 2022, The University of Canterbury\n * @copyright  James Napier, 2022, The University of Canterbury\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n\nimport Templates from 'core/templates';\n\nimport {newUiWrapper} from 'qtype_coderunner/userinterfacewrapper';\nimport {OutputDisplayArea} from 'qtype_coderunner/outputdisplayarea';\n\n\n/**\n * Invert serialisation from '1' to '', vice versa.\n * @param {string} current serialisation.\n * @returns {string} inverted serialisation.\n */\nconst invertSerial = (current) => current[0] === '1' ? [''] : ['1'];\n\n/**\n * Insert the answer code and test code into the wrapper. This may\n * be defined by the user, in UI Params or globalextra. If prefixAns is\n * false: do not include answerCode in final wrapper.\n * @param {string} answerCode text.\n * @param {string} testCode text.\n * @param {string} prefixAns '1' for true, '' for false.\n * @param {string} template provided in UI Params or globalextra.\n * @returns {string} filled template.\n */\nconst fillWrapper = (answerCode, testCode, prefixAns, template) => {\n\n    if (!template) {\n        template = '{{ ANSWER_CODE }}\\n' +\n                   '{{ SCRATCHPAD_CODE }}';\n    }\n    if (!prefixAns) {\n        answerCode = '';\n    }\n    template = template.replaceAll('{{ ANSWER_CODE }}', answerCode);\n    template = template.replaceAll('{{ SCRATCHPAD_CODE }}', testCode);\n    return template;\n};\n\n/**\n * Returns a new object contain default values. If a matching key exists in\n * prescribed, the corresponding value from prescribed will replace the defualt value.\n * Does not add keys/values to the result if that key is not in defualts.\n * @param {object} defaults object with values to be overwritten.\n * @param {object} prescribed settings, typically set by a user.\n * @returns {object} filled with default values, overwritten by their prescribed value (iff included).\n */\nconst overwriteValues = (defaults, prescribed) => {\n    let overwritten = {...defaults};\n    if (prescribed) {\n        for (const [key, value] of Object.entries(defaults)) {\n            overwritten[key] = prescribed[key] || value;\n        }\n    }\n    return overwritten;\n};\n\n/**\n * Is a collapsed element currently collapsed?\n * @param {Element} el which is collapsed using a bootstrap collapse.\n * @returns {boolean} true if el is collapsed.\n */\nconst isCollapsed = (el) => {\n    if (!(el.classList.contains('collapse') || el.classList.contains('collapsing'))) {\n        throw Error('Element does not have collapse class');\n    }\n    return !el.classList.contains('show');\n};\n\n\n/**\n * Constructor for the ScratchpadUi object.\n * @param {string} textAreaId The ID of the html textarea.\n * @param {int} width The width in pixels of the textarea.\n * @param {int} height The height in pixels of the textarea.\n * @param {object} uiParams The UI parameter object.\n */\nclass ScratchpadUi {\n    constructor(textAreaId, width, height, uiParams) {\n        const DEF_UI_PARAMS = {\n            scratchpad_name: '',\n            button_name: '',\n            prefix_name: '',\n            help_text: '',\n            params: {},\n            run_lang: uiParams.lang, // Use answer's ace language if not specified.\n            output_display_mode: 'text',\n            disable_scratchpad: false,\n            wrapper_src: null,\n            escape: false\n        };\n        this.textArea = document.getElementById(textAreaId);\n        this.textAreaId = textAreaId;\n        this.height = height;\n        this.readOnly = this.textArea.readonly;\n        this.fail = false;\n        this.outerDiv = null;\n        this.outputDisplay = null;\n        this.invertPreload = uiParams.invert_prefix;\n        this.lang = uiParams.lang;\n        this.numRows = this.textArea.rows;\n        this.uiParams = overwriteValues(DEF_UI_PARAMS, uiParams);\n        this.runWrapper = this.getRunWrapper();\n        this.reload(); // Draw my beautiful blobs.\n    }\n\n    getRunWrapper() {\n        const wrapperSrc = this.uiParams.wrapper_src;\n        let runWrapper = null;\n        if (wrapperSrc) {\n            if (wrapperSrc === 'globalextra' || wrapperSrc === 'prototypeextra') {\n                runWrapper = this.textArea.dataset[wrapperSrc];\n            } else {\n                this.fail = true;\n                this.failString = 'scratchpad_ui_badrunwrappersrc';\n            }\n        }\n        return runWrapper;\n    }\n\n    failed() {\n        return this.fail;\n    }\n\n    failMessage() {\n        return this.failString;\n    }\n\n    sync() {\n        if (!this.context) {\n            return;\n        }\n        const serialisation = this.getSerialisation();\n        this.setSerialisation(serialisation);\n    }\n\n    getSerialisation() {\n        const prefixAns = document.getElementById(this.context.prefix_ans.id);\n        const showHide = document.getElementById(this.context.show_hide.id);\n        let serialisation = {\n            answer_code: [''],\n            test_code: [''],\n            show_hide: [''],\n            prefix_ans: ['']\n        };\n        if (this.answerTextarea) {\n            serialisation.answer_code = [this.answerTextarea.value];\n        }\n        if (this.testTextarea) {\n            serialisation.test_code = [this.testTextarea.value];\n        }\n        if (showHide && !isCollapsed(showHide)) {\n            serialisation.show_hide = ['1'];\n        }\n        if (prefixAns?.checked || this.context.disable_scratchpad) {\n            serialisation.prefix_ans = ['1'];\n        }\n        if (this.invertPreload) {\n            serialisation.prefix_ans = invertSerial(serialisation.prefix_ans);\n        }\n        return serialisation;\n    }\n\n    setSerialisation(serialisation) {\n        serialisation.prefix_ans = invertSerial(serialisation.prefix_ans);\n        if (Object.values(serialisation).some((val) => val.length === 1 && val[0].length > 0)) {\n            serialisation.prefix_ans = invertSerial(serialisation.prefix_ans);\n            this.textArea.value = JSON.stringify(serialisation);\n        } else {\n            this.textArea.value = ''; // All fields empty...\n        }\n    }\n\n    getElement() {\n        return this.outerDiv;\n    }\n\n    handleRunButtonClick() {\n        if (this.outputDisplay === null) {\n            return;\n        }\n        this.sync(); // Use up-to-date serialization.\n        const preloadString = this.textArea.value;\n        const serial = this.readJson(preloadString);\n        const escape = (code) => this.uiParams.escape ? JSON.stringify(code).slice(1, -1) : code;\n        const answerCode = escape(serial.answer_code[0]);\n        const testCode = escape(serial.test_code[0]);\n        const code = fillWrapper(\n                answerCode,\n                testCode,\n                serial.prefix_ans[0],\n                this.runWrapper\n        );\n        this.outputDisplay.runCode(code, '', true); // Call with no stdin.\n    }\n\n    updateContext(preload) {\n        this.context = {\n            \"id\": this.textAreaId,\n            \"disable_scratchpad\": this.uiParams.disable_scratchpad,\n            \"scratchpad_name\": this.uiParams.scratchpad_name,\n            \"button_name\": this.uiParams.button_name,\n            \"help_text\": {\"text\": this.uiParams.help_text},\n            \"answer_code\": {\n                \"id\": this.textAreaId + '_answer-code',\n                \"name\": \"answer_code\",\n                \"text\": preload.answer_code[0],\n                \"lang\": this.lang,\n                \"rows\": this.numRows\n            },\n            \"test_code\": {\n                \"id\": this.textAreaId + '_test-code',\n                \"name\": \"test_code\",\n                \"text\": preload.test_code[0],\n                \"lang\": this.lang,\n                \"rows\": 6\n            },\n            \"show_hide\": {\n                \"id\": this.textAreaId + '_scratchpad',\n                \"show\": preload.show_hide[0]\n            },\n            \"prefix_ans\": {\n                \"id\": this.textAreaId + '_prefix-ans',\n                \"label\": this.uiParams.prefix_name,\n                \"checked\": preload.prefix_ans[0]\n            },\n            \"output_display\": {\n                \"id\": this.textAreaId + '_run-output'\n            },\n            // Bootstrap collapse requires jQuery friendly ids to work...\n            \"jquery_escape\": function() {\n                return function(text, render) {\n                    return CSS.escape(render(text));\n                };\n            }\n        };\n    }\n\n    readJson(preloadString) {\n        const defaultSerial = {\n            \"answer_code\": [''],\n            \"test_code\": [''],\n            \"show_hide\": [''],\n            \"prefix_ans\": ['1'] // Ticked by default!\n        };\n        let serial;\n        if (preloadString !== \"\") {\n            try {\n                serial = JSON.parse(preloadString);\n            } catch {\n                // Preload is not JSON, so use preloaded string as answer_code.\n                serial = {\"answer_code\": [preloadString]};\n            }\n            if (!serial.hasOwnProperty(\"answer_code\")) {\n                // No student_answer field... something is wrong!\n                throw TypeError(\"JSON has wrong signature, missing answer_code field.\");\n            }\n        }\n        serial = overwriteValues(defaultSerial, serial);\n\n        if (this.invertPreload) {\n            serial.prefix_ans = invertSerial(serial.prefix_ans);\n        }\n        return serial;\n    }\n\n    async reload() {\n        const preloadString = this.textArea.value;\n        let preload;\n        try {\n            preload = this.readJson(preloadString);\n        } catch (error) {\n            this.fail = true;\n            this.failString = 'scratchpad_ui_invalidserialisation';\n            return;\n        }\n        this.updateContext(preload);\n        try {\n            const {html} = await Templates.renderForPromise('qtype_coderunner/scratchpad_ui', this.context);\n            this.drawUi(html);\n            this.addAceUis();\n            this.outputDisplay = new OutputDisplayArea(\n                this.context.output_display.id,\n                this.uiParams.output_display_mode,\n                this.uiParams.run_lang,\n                this.uiParams.params\n            );\n            this.addEventListeners();\n        } catch (e) {\n            this.fail = true;\n            this.failString = \"scratchpad_ui_templateloadfail\";\n        }\n    }\n\n    drawUi(html) {\n        const wrapperDiv = document.getElementById(this.textAreaId).nextSibling;\n        wrapperDiv.innerHTML = html;\n        this.outerDiv = wrapperDiv.firstChild;\n        // No resizing the outer wrapper. Instead, resize the two sub UIs,\n        // they will expand accordingly.\n        wrapperDiv.style.resize = 'none';\n    }\n\n    addAceUis() {\n        this.answerTextarea = document.getElementById(this.context.answer_code.id);\n        this.testTextarea = document.getElementById(this.context.test_code.id);\n        this.answerCodeUi = newUiWrapper('ace', this.context.answer_code.id);\n        if (this.testTextarea) {\n            this.testCodeUi = newUiWrapper('ace', this.context.test_code.id);\n        }\n    }\n\n    addEventListeners() {\n        const runButton = document.getElementById(this.textAreaId + '_run-btn');\n        if (runButton) {\n            runButton.addEventListener('click', () => this.handleRunButtonClick());\n        }\n    }\n\n    resize() {} // Nothing to see here. Move along please.\n\n    hasFocus() {\n        let focused = false;\n        if (this.answerCodeUi?.uiInstance.hasFocus()) {\n            focused = true;\n        }\n        if (this.testCodeUi?.uiInstance.hasFocus()) {\n            focused = true;\n        }\n        return focused;\n    }\n\n    destroy() {\n        this.sync();\n        this.answerCodeUi?.uiInstance.destroy();\n        this.testCodeUiCodeUi?.uiInstance.destroy();\n        this.outerDiv?.remove();\n        this.outerDiv = null;\n    }\n}\n\n\nexport {ScratchpadUi as Constructor};\n"],"names":["invertSerial","current","overwriteValues","defaults","prescribed","overwritten","key","value","Object","entries","constructor","textAreaId","width","height","uiParams","DEF_UI_PARAMS","scratchpad_name","button_name","prefix_name","help_text","params","run_lang","lang","output_display_mode","disable_scratchpad","wrapper_src","escape","textArea","document","getElementById","readOnly","this","readonly","fail","outerDiv","outputDisplay","invertPreload","invert_prefix","numRows","rows","runWrapper","getRunWrapper","reload","wrapperSrc","dataset","failString","failed","failMessage","sync","context","serialisation","getSerialisation","setSerialisation","prefixAns","prefix_ans","id","showHide","show_hide","answer_code","test_code","answerTextarea","testTextarea","el","classList","contains","Error","isCollapsed","checked","values","some","val","length","JSON","stringify","getElement","handleRunButtonClick","preloadString","serial","readJson","code","slice","answerCode","testCode","template","replaceAll","fillWrapper","runCode","updateContext","preload","text","render","CSS","parse","hasOwnProperty","TypeError","error","html","Templates","renderForPromise","drawUi","addAceUis","OutputDisplayArea","output_display","addEventListeners","e","wrapperDiv","nextSibling","innerHTML","firstChild","style","resize","answerCodeUi","testCodeUi","runButton","addEventListener","hasFocus","focused","_this$answerCodeUi","uiInstance","_this$testCodeUi","destroy","testCodeUiCodeUi","remove"],"mappings":"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"}