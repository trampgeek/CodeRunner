define("qtype_coderunner/outputdisplayarea",["exports","jquery","core/ajax","core/str"],(function(_exports,_jquery,_ajax,_str){function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}
/**
   * A module used for running code using the Coderunner webservice (CRWS) and displaying output. Originally
   * developed for use in the Scratchpad UI. It has three modes of operation:
   * - 'text': Just display the output as text, html escaped.
   * - 'json': The recommended way to display programs that use stdin or output images (or both).
   *      - Accepts JSON in the CRWS response output with fields:
   *          - "returncode": ...
   *          - "stdout": stdout text.
   *          - "stderr": error text.
   *          - "files": images encoded in base64 text encoding. These will be displayed above any stdout text.
   *      - When input from stdin is required the returncode 42 should be used. An (html) input will be added after
   *        the last stdout received. When enter is pressed, runCode is called with value of the input added to the
   *        stdin string. This repeats until returncode is no longer 42.
   * - 'html': Display program output as raw html inside the output area.
   *      - This can be used to show images and insert other HTML tags (and beyond).
   *      - Giving an <input> tag the class 'coderunner-run-input' will add an event that
   *        on pressing enter will call the runCode method with .
   *
   * @module qtype_coderunner/outputdisplayarea
   * @copyright  James Napier, 2023, The University of Canterbury
   * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
   */Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.OutputDisplayArea=void 0,_jquery=_interopRequireDefault(_jquery),_ajax=_interopRequireDefault(_ajax);_exports.OutputDisplayArea=class{constructor(displayAreaId,outputMode,lang,sandboxParams){this.displayAreaId=displayAreaId,this.lang=lang,this.sandboxParams=sandboxParams,this.displayArea=document.getElementById(displayAreaId),this.textDisplay=document.getElementById(displayAreaId+"-text"),this.imageDisplay=document.getElementById(displayAreaId+"-images"),this.mode=outputMode,this.stdIn=[],this.prevRunSettings=null}clearDisplay(){this.textDisplay.innerHTML="",this.imageDisplay.innerHTML=""}displayText(response){const output=response.output,error=response.stderr;this.textDisplay.innerText=output+error}displayHtml(response){const output=response.output,error=response.stderr;this.textDisplay.innerHTML=output+error;const inputEl=this.textDisplay.querySelector(".coderunner-run-input");inputEl&&this.addInputEvents(inputEl)}displayNoOutput(response){const isNoOutput=""===response.output&&""===response.stderr;return isNoOutput&&(this.textDisplay.innerHTML='<span style="color:red">&lt; No output! &gt;</span>'),isNoOutput}display(response){if(!this.displayNoOutput(response))if("json"===this.mode)this.displayJson(response);else if("html"===this.mode)this.displayHtml(response);else{if("text"!==this.mode)throw Error('Invalid outputMode given: "'.concat(this.mode,'"'));this.displayText(response)}}async runCode(code,stdin){let shouldClearDisplay=arguments.length>2&&void 0!==arguments[2]&&arguments[2];this.prevRunSettings=[code,stdin],shouldClearDisplay&&this.clearDisplay(),_ajax.default.call([{methodname:"qtype_coderunner_run_in_sandbox",args:{contextid:M.cfg.contextid,sourcecode:code,language:this.lang,stdin:stdin,params:JSON.stringify(this.sandboxParams)},done:responseJson=>{const response=JSON.parse(responseJson);this.display(response)},fail:error=>{alert(error.message)}}])}displayJson(response){var result=JSON.parse(response.output),text=result.stdout;42!==result.returncode&&(text+=result.stderr),13==result.returncode&&(text+="\n*** Timeout error ***\n");var base64,numImages=0;if(result.files)for(var prop in result.files){const image=(base64=result.files[prop],(0,_jquery.default)('<img src="data:image/png;base64,'.concat(base64,'">')));this.imageDisplay.append(image),numImages+=1}""===text.trim()&&42!==result.returncode?0==numImages&&(this.textDisplay.innerHTML='<span style="color:red">&lt; No output! &gt;</span>'):this.textDisplay.innerText=text,42===result.returncode&&this.addInput()}addInput(){const inputId="".concat(this.displayAreaId,"-input-field");this.textDisplay.innerHTML+='<input type="text" id="'.concat(inputId,'" class="').concat("coderunner-run-input",'">');const inputEl=document.getElementById(inputId);this.addInputEvents(inputEl)}addInputEvents(inputEl){inputEl.focus(),inputEl.addEventListener("keydown",(e=>{13===e.keyCode&&e.preventDefault()})),inputEl.addEventListener("keyup",(e=>{if(13===e.keyCode){const line=inputEl.value;inputEl.remove(),this.textDisplay.innterHTML+=line,this.prevRunSettings[1]+=line+"\n",this.runCode(...this.prevRunSettings,!1)}}))}}}));

//# sourceMappingURL=outputdisplayarea.min.js.map