define("qtype_coderunner/outputdisplayarea",["exports","core/ajax","core/str"],(function(_exports,_ajax,_str){var obj;
/**
   * A module used for running code using the Coderunner webservice (CRWS) and displaying output. Originally
   * developed for use in the Scratchpad UI. It has three modes of operation:
   * - 'text': Just display the output as text, html escaped.
   * - 'json': The recommended way to display programs that use stdin or output images (or both).
   *      - Accepts JSON in the CRWS response output with fields:
   *          - "returncode": Error/return code from running program.
   *          - "stdout": Stdout text from running program.
   *          - "stderr": Error text from running program.
   *          - "files": Images encoded in base64 text encoding. These will be displayed above any stdout text.
   *      - When input from stdin is required the returncode 42 should be returned, raise this
   *        any time the program asks for input. An (html) input will be added after the last stdout received.
   *        When enter is pressed, runCode is called with value of the input added to the stdin string.
   *        This repeats until returncode is no longer 42.
   * - 'html': Display program output as raw html inside the output area.
   *      - This can be used to show images and insert other HTML tags (and beyond).
   *      - Giving an <input> tag the class 'coderunner-run-input' will add an event that
   *        on pressing enter will call the runCode method again with the value of that input field added to stdin.
   *        This method of receiving stdin is harder to use but more flexible than JSON, enter at your own risk.
   *
   * @module qtype_coderunner/outputdisplayarea
   * @copyright  James Napier, 2023, The University of Canterbury
   * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
   */Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.OutputDisplayArea=void 0,_ajax=(obj=_ajax)&&obj.__esModule?obj:{default:obj};const JSON_DISPLAY_PROPS=["returncode","stdout","stderr","files"],combinedOutput=response=>response.cmpinfo+response.output+response.stderr,getImage=function(base64){let type=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"png";const image=document.createElement("img").src="data:image/".concat(type,";base64,").concat(base64);return image};_exports.OutputDisplayArea=class{constructor(displayAreaId,outputMode,lang,sandboxParams){this.displayAreaId=displayAreaId,this.lang=lang,this.sandboxParams=sandboxParams,this.displayArea=document.getElementById(displayAreaId),this.textDisplay=document.getElementById(displayAreaId+"-text"),this.imageDisplay=document.getElementById(displayAreaId+"-images"),this.mode=outputMode,this.stdIn=[],this.prevRunSettings=null}clearDisplay(){this.textDisplay.innerHTML="",this.imageDisplay.innerHTML=""}displayText(response){this.textDisplay.innerText=combinedOutput(response)}displayHtml(response){this.textDisplay.innerHTML=combinedOutput(response);const inputEl=this.textDisplay.querySelector(".coderunner-run-input");inputEl&&this.addInputEvents(inputEl)}displayJson(response){const result=this.validateJson(response.output);let text=result.stdout;42!==result.returncode&&(text+=result.stderr),13==result.returncode&&(text+="\n*** Timeout error ***\n");let numImages=0;if(result.files)for(const prop in result.files){const image=getImage(result.files[prop]);this.imageDisplay.append(image),numImages+=1}""===text.trim()&&42!==result.returncode?0==numImages&&this.displayNoOutput(null):this.textDisplay.innerText=text,42===result.returncode&&this.addInput()}validateJson(jsonString){let result=null;try{result=JSON.parse(jsonString)}catch(e){window.alert("Error parsing display JSON output: \n                ".concat(jsonString,"\n                JSON Parsing error Msg: \n                ").concat(e.message,"\n                The question author must fix this!"))}const missing=((obj,props)=>props.filter((prop=>!obj.hasOwnProperty(prop))))(result,JSON_DISPLAY_PROPS);return missing.length>0&&window.alert("Display JSON (in response.result) is missing the following fields:\n                ".concat(missing.join(),"\n                The question author must fix this!")),result}displayNoOutput(response){const isNoOutput=0===combinedOutput(response).length;if(isNoOutput||null===response){const span=document.createElement("span");span.style.color="red",span.innerText="< No output! >",this.clearDisplay(),this.textDisplay.append(span)}return isNoOutput}display(response){const error=(response=>{const ERROR_RESPONSES=[[1,0,"error_access_denied"],[2,0,"error_unknown_language"],[3,0,"error_access_denied"],[4,0,"error_submission_limit_reached"],[5,0,"error_sandbox_server_overload"],[0,11,""],[0,12,""],[0,13,"error_timeout"],[0,15,""],[0,17,"error_memory_limit"],[0,21,"error_sandbox_server_overload"],[0,30,"error_excessive_output"]];for(let i=0;i<ERROR_RESPONSES.length;i++){let row=ERROR_RESPONSES[i];if(row[0]==response.error&&(0!=response.error||response.result==row[1]))return row[2]}return"error_unknown_runtime"})(response);if(""===error){if(!this.displayNoOutput(response))if("json"===this.mode)this.displayJson(response);else if("html"===this.mode)this.displayHtml(response);else{if("text"!==this.mode)throw Error('Invalid outputMode given: "'.concat(this.mode,'"'));this.displayText(response)}}else(async(langStringName,display,additionalText)=>{const message=await(0,_str.get_string)(langStringName,"qtype_coderunner");display.innerText="*** "+message+" ***\n",additionalText&&(display.innerText+=additionalText)})(error,this.textDisplay)}runCode(code,stdin){let shouldClearDisplay=arguments.length>2&&void 0!==arguments[2]&&arguments[2];this.prevRunSettings=[code,stdin],shouldClearDisplay&&this.clearDisplay(),_ajax.default.call([{methodname:"qtype_coderunner_run_in_sandbox",args:{contextid:M.cfg.contextid,sourcecode:code,language:this.lang,stdin:stdin,params:JSON.stringify(this.sandboxParams)},done:responseJson=>{const response=JSON.parse(responseJson);this.display(response)},fail:error=>{alert(error.message)}}])}addInput(){const inputId="".concat(this.displayAreaId,"-input-field");this.textDisplay.innerHTML+='<input type="text" id="'.concat(inputId,'" class="').concat("coderunner-run-input",'">');const inputEl=document.getElementById(inputId);this.addInputEvents(inputEl)}addInputEvents(inputEl){inputEl.focus(),inputEl.addEventListener("keydown",(e=>{13===e.keyCode&&e.preventDefault()})),inputEl.addEventListener("keyup",(e=>{if(13===e.keyCode){const line=inputEl.value;inputEl.remove(),this.textDisplay.innterHTML+=line,this.prevRunSettings[1]+=line+"\n",this.runCode(...this.prevRunSettings,!1)}}))}}}));

//# sourceMappingURL=outputdisplayarea.min.js.map