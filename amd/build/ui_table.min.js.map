{"version":3,"file":"ui_table.min.js","sources":["../src/ui_table.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more util.details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Implementation of the table_ui user interface plugin. For overall details\n * of the UI plugin architecture, see userinterfacewrapper.js.\n *\n * This plugin replaces the usual textarea answer element with a div\n * containing an HTML table. The number of columns, and\n * the initial number of rows are specified by required UI parameters\n * num_columns and num_rows respectively.\n * Optional additional UI parameters are:\n *   1. column_headers: a list of strings that can be used to provide a\n *      fixed header row at the top.\n *   2. row_labels: a list of strings that can be used to provide a\n *      fixed row label column at the left.\n *   3. dynamic_rows, which, if true, allows the user to add rows.\n *   4. locked_cells: a list of [row, column] pairs, being the coordinates\n *      of table cells that cannot be changed by the user. row and column numbers\n *      are zero origin and do not include the header row or the row labels.\n *   5. width_percents: a list of the percentages of the width occupied\n *      by each column. This list must include a value for the row labels, if present.\n *\n * Individual cells are textareas except when the number of rows per cell is set to\n * 1, in which case input elements are used instead.\n *\n * The serialisation of the table, which is what is essentially copied back\n * into the original answer box textarea for submissions as the answer, is a JSON array. Each\n * element in the array is itself an array containing the values of one row\n * of the table. Empty cells are empty strings. The table header row and row\n * label columns are not provided in the serialisation.\n *\n * To preload the table with data, simply set the answer_preload of the question\n * to a json array of row values (each itself an array). If the number of rows\n * in the preload exceeds the number set by num_rows, extra rows are\n * added. If the number is less than num_rows, or if there is no\n * answer preload, undefined rows are simply left blank.\n *\n * As a special case of the serialisation, if all cells in the serialisation\n * are empty strings, the serialisation is itself the empty string.\n *\n * @module qtype_coderunner/ui_table\n * @copyright  Richard Lobb, 2018, The University of Canterbury\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine(['jquery'], function($) {\n    /**\n     * Constructor for the TableUI object.\n     * @param {string} textareaId The ID of the html textarea.\n     * @param {int} width The width in pixels of the textarea.\n     * @param {int} height The height in pixels of the textarea.\n     * @param {object} uiParams The UI parameter object.\n     */\n    function TableUi(textareaId, width, height, uiParams) {\n        this.textArea = $(document.getElementById(textareaId));\n        this.readOnly = this.textArea.prop('readonly');\n        this.tableDiv = null;\n        this.uiParams = uiParams;\n        if (!uiParams.num_columns ||\n            !uiParams.num_rows) {\n            this.fail = true;\n            this.failString = 'table_ui_missingparams';\n            return;  // We're dead, fred.\n        }\n\n        this.fail = false;\n        this.lockedCells = uiParams.locked_cells || [];\n        this.hasHeader = uiParams.column_headers && uiParams.column_headers.length > 0 ? true : false;\n        this.hasRowLabels = uiParams.row_labels && uiParams.row_labels.length > 0 ? true : false;\n        this.numDataColumns = uiParams.num_columns;\n        this.rowsPerCell = uiParams.lines_per_cell || 2;\n        this.totNumColumns = this.numDataColumns + (this.hasRowLabels ? 1 : 0);\n        this.columnWidths = this.computeColumnWidths();\n        this.reload();\n    }\n\n    // Return an array of the percentage widths required for each of the\n    // totNumColumns columns.\n    TableUi.prototype.computeColumnWidths = function() {\n        var defaultWidth = Math.trunc(100 / this.totNumColumns),\n            columnWidths = [];\n        if (this.uiParams.column_width_percents && this.uiParams.column_width_percents.length > 0) {\n            return this.uiParams.column_width_percents;\n        } else if (Array.prototype.fill) { // Anything except bloody IE.\n            return new Array(this.totNumColumns).fill(defaultWidth);\n        } else { // IE. What else?\n            for (var i = 0; i < this.totNumColumns; i++) {\n                columnWidths.push(defaultWidth);\n            }\n            return columnWidths;\n        }\n    };\n\n    // Return True if the cell at the given row and column is locked.\n    // The given row and column numbers exclude column headers and row labels.\n    TableUi.prototype.isLockedCell = function(row, col) {\n        for (var i = 0; i < this.lockedCells.length; i++) {\n            if (this.lockedCells[i][0] == row && this.lockedCells[i][1] == col) {\n                return true;\n            }\n        }\n        return false;\n    };\n\n    TableUi.prototype.getElement = function() {\n        return this.tableDiv;\n    };\n\n    TableUi.prototype.failed = function() {\n        return this.fail;\n    };\n\n    TableUi.prototype.failMessage = function() {\n        return this.failString;\n    };\n\n    // Copy the serialised version of the Table UI area to the TextArea.\n    TableUi.prototype.sync = function() {\n        var\n            serialisation = [],\n            empty = true,\n            tableRows = $(this.tableDiv).find('table tbody tr');\n\n        tableRows.each(function () {\n            var rowValues = [];\n            $(this).find('.table_ui_cell').each(function () {\n                var cellVal = $(this).val();\n                rowValues.push(cellVal);\n                if (cellVal) {\n                    empty = false;\n                }\n            });\n            serialisation.push(rowValues);\n        });\n\n        if (empty) {\n            this.textArea.val('');\n        } else {\n            this.textArea.val(JSON.stringify(serialisation));\n        }\n    };\n\n    // Return the HTML for row number iRow.\n    TableUi.prototype.tableRow = function(iRow, preload) {\n        const cellStyle = \"width:100%;padding:0;font-family:monospace;\";\n        let html = '<tr>', widthIndex = 0, width, disabled, value;\n\n        // Insert the row label if required.\n        if (this.hasRowLabels) {\n            width = this.columnWidths[0];\n            widthIndex = 1;\n            html += \"<th style='padding-top:8px;text-align:center;width:\" + width + \"%' scope='row'>\";\n            if (iRow < this.uiParams.row_labels.length) {\n                html += this.uiParams.row_labels[iRow];\n            }\n            html += \"</th>\";\n        }\n\n        for (let iCol = 0; iCol < this.numDataColumns; iCol++) {\n            width = this.columnWidths[widthIndex++];\n            disabled = this.isLockedCell(iRow, iCol) ? ' disabled' : '';\n            value = iRow < preload.length ? preload[iRow][iCol] : '';\n\n            if (iRow < preload.length) {\n                value = preload[iRow][iCol];\n            }\n            html += \"<td style='padding:2px;margin:0,width:\" + width + \"'%>\";\n            if (this.rowsPerCell == 1) {\n                // Use input element for 1-row cells.\n                html += `<input type=\"text\" class=\"table_ui_cell\" style=\"${cellStyle}\" value=\"${value}\"${disabled}>`;\n\n            } else {\n                // Use textarea elements everywhere else.\n                html += `<textarea class=\"table_ui_cell\" rows=\"${this.rowsPerCell}\"`;\n                html += ` style=\"${cellStyle}resize:vertical;\"${disabled}>${value}</textarea>`;\n            }\n            html += \"</td>\";\n        }\n        html += '</tr>';\n        return html;\n    };\n\n    // Return the HTML for the table's head section.\n    TableUi.prototype.tableHeadSection = function() {\n        let html = \"<thead>\\n\",\n            colIndex = 0;  // Column index including row label if present.\n\n        if (this.hasHeader) {\n            html += \"<tr>\";\n\n            if (this.hasRowLabels) {\n                html += \"<th style='width:\" + this.columnWidths[0] + \"%'></th>\";\n                colIndex += 1;\n            }\n\n            for(let iCol = 0; iCol < this.numDataColumns; iCol++) {\n                html += \"<th style='width:\" + this.columnWidths[colIndex] + \"%'>\";\n                if (iCol < this.uiParams.column_headers.length) {\n                    html += this.uiParams.column_headers[iCol];\n                }\n                colIndex++;\n                html += \"</th>\";\n            }\n            html += \"</tr>\\n\";\n        }\n        html += \"</thead>\\n\";\n        return html;\n    };\n\n    // Build the HTML table, filling it with the data from the serialisation\n    // currently in the textarea (if there is any).\n    TableUi.prototype.reload = function() {\n        var\n            preloadJson = $(this.textArea).val(), // JSON-encoded table values.\n            preload = [],\n            divHtml = \"<div style='height:fit-content' class='qtype-coderunner-table-outer-div'>\\n\" +\n                      \"<table class='table table-bordered qtype-coderunner_table'>\\n\";\n\n        if (preloadJson) {\n            try {\n                preload = JSON.parse(preloadJson);\n            } catch(error)  {\n                this.fail = true;\n                this.failString = 'table_ui_invalidjson';\n                return;\n            }\n        }\n\n        try {\n            // Build the table head section.\n            divHtml += this.tableHeadSection();\n\n            // Build the table body. Each table cell has a textarea inside it\n            // except when the number of rows is 1, when input elements are used instead.\n            // except for row labels (if present).\n            divHtml += \"<tbody>\\n\";\n            var num_rows_required = Math.max(this.uiParams.num_rows, preload.length);\n            for (var iRow = 0; iRow < num_rows_required; iRow++) {\n                divHtml += this.tableRow(iRow, preload);\n            }\n\n            divHtml += '</tbody>\\n</table>\\n</div>';\n            this.tableDiv = $(divHtml);\n            if (this.uiParams.dynamic_rows) {\n                this.addButtons();\n            }\n\n            // When using input elements, prevent Enter from submitting form.\n            if (this.rowsPerCell == 1) {\n                const ENTER = 13;\n                $(this.tableDiv).find('.table_ui_cell').each(function() {\n                    $(this).on('keydown', (e) => {\n                        if (e.keyCode === ENTER) {\n                            e.preventDefault();\n                        }\n                    });\n                });\n            }\n\n        } catch (error) {\n            this.fail = true;\n            this.failString = 'table_ui_invalidserialisation';\n        }\n    };\n\n    // Add 'Add row' and 'Delete row' buttons at the end of the table.\n    TableUi.prototype.addButtons = function() {\n        var deleteButtonHtml = '<button type=\"button\"' +\n                'style=\"float:right;margin-right:6px\" disabled>Delete row</button>',\n            deleteButton = $(deleteButtonHtml),\n            t = this;\n        this.tableDiv.append(deleteButton);\n        deleteButton.click(function() {\n            var numRows = t.tableDiv.find('table tbody tr').length,\n                lastRow = t.tableDiv.find('tr:last');\n            if (numRows > t.uiParams.num_rows) {\n                lastRow.remove();\n            }\n            lastRow = t.tableDiv.find('tr:last'); // New last row.\n            if (numRows == t.uiParams.num_rows + 1) {\n                $(this).prop('disabled', true);\n            }\n        });\n\n        var addButtonHtml = '<button type=\"button\"' +\n                'style=\"float:right;margin-right:6px\">Add row</button>',\n            addButton = $(addButtonHtml);\n        t.tableDiv.append(addButton);\n        addButton.click(function() {\n            var lastRow, newRow;\n            lastRow = t.tableDiv.find('table tbody tr:last');\n            newRow = lastRow.clone();  // Copy the last row of the table.\n            newRow.find('.table_ui_cell').each(function() {  // Clear all td elements in it.\n                $(this).val('');\n            });\n            lastRow.after(newRow);\n            $(this).prev().prop('disabled', false);\n        });\n    };\n\n    TableUi.prototype.resize = function() {}; // Nothing to see here. Move along please.\n\n    TableUi.prototype.hasFocus = function() {\n        var focused = false;\n        $(this.tableDiv).find('.table_ui_cell').each(function() {\n            if (this === document.activeElement) {\n                focused = true;\n            }\n        });\n        return focused;\n    };\n\n    // Destroy the HTML UI and serialise the result into the original text area.\n    TableUi.prototype.destroy = function() {\n        this.sync();\n        $(this.tableDiv).remove();\n        this.tableDiv = null;\n    };\n\n    return {\n        Constructor: TableUi\n    };\n});\n"],"names":["define","$","TableUi","textareaId","width","height","uiParams","this","textArea","document","getElementById","readOnly","prop","tableDiv","num_columns","num_rows","fail","failString","lockedCells","locked_cells","hasHeader","column_headers","length","hasRowLabels","row_labels","numDataColumns","rowsPerCell","lines_per_cell","totNumColumns","columnWidths","computeColumnWidths","reload","prototype","defaultWidth","Math","trunc","column_width_percents","Array","fill","i","push","isLockedCell","row","col","getElement","failed","failMessage","sync","serialisation","empty","find","each","rowValues","cellVal","val","JSON","stringify","tableRow","iRow","preload","cellStyle","disabled","value","html","widthIndex","iCol","tableHeadSection","colIndex","preloadJson","divHtml","parse","error","num_rows_required","max","dynamic_rows","addButtons","ENTER","on","e","keyCode","preventDefault","deleteButton","t","append","click","numRows","lastRow","remove","addButton","newRow","clone","after","prev","resize","hasFocus","focused","activeElement","destroy","Constructor"],"mappings":"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"}